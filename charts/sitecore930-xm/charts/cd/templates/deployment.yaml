apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cd.fullname" . }}
  labels:
    {{- include "cd.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
  progressDeadlineSeconds: 1200
  selector:
    matchLabels:
      {{- include "cd.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cd.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "cd.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - powershell.exe
            - -Command
            - "& C:\\tools\\entrypoints\\iis\\Production.ps1"
          env:
            - name: SITECORE_LICENSE_LOCATION
              value: "C:\\license\\license.xml"
            - name: SITECORE_APPSETTINGS_ROLE__DEFINE
              value: "ContentManagement, Indexing"
            - name: ENTRYPOINT_STDOUT_IIS_ACCESS_LOG_ENABLED
              value: "{{ .Values.entrypoint.iisAccessLogEnabled }}"
            - name: ENTRYPOINT_STDOUT_IIS_ERROR_LOG_ENABLED
              value: "{{ .Values.entrypoint.iisErrorLogEnabled }}"
            - name: ENTRYPOINT_STDOUT_SITECORE_LOG_ENABLED
              value: "{{ .Values.entrypoint.sitecoreLogEnabled }}"
            - name: SITECORE_CONNECTIONSTRINGS_SECURITY
              value: "Data Source={{ include "sql.fullName" . }};Initial Catalog=Sitecore.Core;User ID=sa;Password={{ .Values.global.sqlSaPassword }}"
            - name: SITECORE_CONNECTIONSTRINGS_WEB
              value: "Data Source={{ include "sql.fullName" . }};Initial Catalog=Sitecore.Web;User ID=sa;Password={{ .Values.global.sqlSaPassword }}"
            - name: SITECORE_CONNECTIONSTRINGS_EXPERIENCEFORMS
              value: "Data Source={{ include "sql.fullName" . }};Initial Catalog=Sitecore.ExperienceForms;User ID=sa;Password={{ .Values.global.sqlSaPassword }}"
            - name: SITECORE_CONNECTIONSTRINGS_SOLR.SEARCH
              value: "http://{{ include "solr.fullName" . }}:8983/solr"
            - name: SITECORE_APPSETTINGS_TELERIK.ASYNCUPLOAD.CONFIGURATIONENCRYPTIONKEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "cd.secretName" . }}
                  key: telerik_encryption_key
            - name: SITECORE_APPSETTINGS_TELERIK.UPLOAD.CONFIGURATIONHASHKEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "cd.secretName" . }}
                  key: telerik_encryption_key
            - name: SITECORE_APPSETTINGS_TELERIK.WEB.UI.DIALOGPARAMETERSENCRYPTIONKEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "cd.secretName" . }}
                  key: telerik_encryption_key
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: default
              containerPort: 80
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            httpGet:
              scheme: "HTTP"
              path: /healthz/live
              port: 80
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            httpGet:
              scheme: "HTTP"
              path: /healthz/ready
              port: 80
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: license
            mountPath: "C:/license"
            readOnly: true
      volumes:
      - name: license
        secret:
          secretName: {{ .Values.global.licenseFileSecretName }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
